#! /usr/bin/env node
var e=Object.create?function(e,t,o,r){void 0===r&&(r=o);var l=Object.getOwnPropertyDescriptor(t,o);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,r,l)}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]},t=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t},o=function(o){if(o&&o.__esModule)return o;var r={};if(null!=o)for(var l in o)"default"!==l&&Object.prototype.hasOwnProperty.call(o,l)&&e(r,o,l);return t(r,o),r},r=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const l=o(require("path")),n=o(require("fs")),a=r(require("chalk")),c=r(require("figlet")),u=r(require("clear")),s=require("child_process");(()=>{(0,u.default)(),console.log(a.default.blue(c.default.textSync("nodevar",{horizontalLayout:"full"}))),console.log(a.default.blue("run commands with package.json variables")),console.log();const e=l.join(process.cwd(),"package.json");if(n.existsSync(e))try{const t=JSON.parse(n.readFileSync(e).toString("utf-8"));console.log(a.default.blue(`project:    '${a.default.cyanBright(t.name)}'`)),console.log(a.default.blue(`version:    '${a.default.cyanBright(t.version)}'`)),console.log(a.default.blue(`author:     '${a.default.cyanBright(t.author)}'`)),console.log(a.default.blue(`timestamp:  '${a.default.cyanBright((new Date).getTime().toString())}'`)),console.log(a.default.blue(`date:       '${a.default.cyanBright((new Date).toISOString())}'`)),console.log();const o=process.argv.slice(2).join(" "),r=o.replace(/\{project\}/g,t.name).replace(/\{name\}/g,t.name).replace(/\{version\}/g,t.version).replace(/\{author\}/g,t.author).replace(/\{timestamp\}/g,(new Date).getTime().toString()).replace(/\{date\}/g,(new Date).toISOString());if(console.log(`${a.default.blue("raw command:")}\t ${a.default.cyanBright(o)}`),console.log(`${a.default.blue("parsed command:")}\t ${a.default.cyanBright(r)}`),console.log(),0===r.trim().length)return void console.log(a.default.red("no command provided."));try{const e=(new Date).getTime(),t=(0,s.exec)(r);t.stdout&&t.stdout.pipe(process.stdout),t.stderr&&t.stderr.pipe(process.stderr),t.on("close",(t=>{console.log(),console.log(`process exited with code ${t} (${(new Date).getTime()-e}ms)`)}))}catch(e){console.error(e)}}catch(e){console.log(a.default.red("invalid package.json"))}else console.log(a.default.red(`no package.json found in '${process.cwd()}'`))})();