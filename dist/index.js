#! /usr/bin/env node
import*as o from"path";import*as e from"fs";import c from"chalk";import t from"figlet";import n from"clear";import{exec as r}from"child_process";!function(){n(),console.log(c.blue(t.textSync("nodevar",{horizontalLayout:"full"}))),console.log(c.blue("run commands with package.json variables")),console.log();var a=o.join(process.cwd(),"package.json");if(e.existsSync(a))try{var l=JSON.parse(e.readFileSync(a).toString("utf-8"));console.log(c.blue("project:    '".concat(c.cyanBright(l.name),"'"))),console.log(c.blue("version:    '".concat(c.cyanBright(l.version),"'"))),console.log(c.blue("author:     '".concat(c.cyanBright(l.author),"'"))),console.log(c.blue("timestamp:  '".concat(c.cyanBright((new Date).getTime().toString()),"'"))),console.log(c.blue("date:       '".concat(c.cyanBright((new Date).toISOString()),"'"))),console.log();var s=process.argv.slice(2).join(" "),i=s.replace(/\{project\}/g,l.name).replace(/\{name\}/g,l.name).replace(/\{version\}/g,l.version).replace(/\{author\}/g,l.author).replace(/\{timestamp\}/g,(new Date).getTime().toString()).replace(/\{date\}/g,(new Date).toISOString());if(console.log("".concat(c.blue("raw command:"),"\t ").concat(c.cyanBright(s))),console.log("".concat(c.blue("parsed command:"),"\t ").concat(c.cyanBright(i))),console.log(),0===i.trim().length)return void console.log(c.red("no command provided."));try{var g=(new Date).getTime(),p=r(i);p.stdout&&p.stdout.pipe(process.stdout),p.stderr&&p.stderr.pipe(process.stderr),p.on("close",(function(o){console.log(),console.log("process exited with code ".concat(o," (").concat((new Date).getTime()-g,"ms)"))}))}catch(o){console.error(o)}}catch(o){console.log(c.red("invalid package.json"))}else console.log(c.red("no package.json found in '".concat(process.cwd(),"'")))}();